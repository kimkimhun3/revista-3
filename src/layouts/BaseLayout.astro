---
import { ViewTransitions } from "astro:transitions";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import "@fontsource-variable/overpass-mono";
import "@fontsource-variable/inconsolata";
import { SEO } from "astro-seo";
import { getImage } from "astro:assets";

let baseUrl = new URL(Astro.request.url).origin;

const metaImage = await getImage({
  src: "https://res.cloudinary.com/djh8z83mc/image/upload/last_logo1_brbdkg.png",
  alt: "cover_image",
  inferSize: true,
  height: "720",
  decoding: "async",
  format: "webp",
  loading: "lazy",
});

const favicon_webp = await getImage({
  src: "https://res.cloudinary.com/djh8z83mc/image/upload/last_logo1_brbdkg.png",
  alt: "favicon",
  inferSize: true,
  height: "1000",
  decoding: "async",
  format: "webp",
  loading: "lazy",
});

const metaDescription = "My personal realm.";
const {
  image = `${baseUrl}${metaImage?.src}`,  // Default image if not specified
  description = metaDescription,
  author = "Kimhoon Rin",
  pubDate,
  updatedDate,
  title = "Hoon",
  site_name = "Hoon",
  alt = "cover_image",
  is404Page = false,
} = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site).toString();
const makeTitle = title ? `${title} | Hoon` : "Hoon";
---

<!DOCTYPE html>
<html class="bg-[rgb(244,242,238)] dark:bg-[rgb(34,33,37)]" lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/webp" href={favicon_webp.src} />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="generator" content={Astro.generator} />

    <SEO
      title={makeTitle}
      description={description}
      canonical={canonicalURL}
      twitter={{
        creator: "@hooon",
        site: "@hooon",
        card: "summary_large_image",
        image: image,  // Using the image from the MDX frontmatter
      }}
      openGraph={{
        basic: {
          url: canonicalURL,
          type: "website",
          title: makeTitle,
          image: image,  // Using the image from the MDX frontmatter
        },
        image: {
          alt: alt,  // Alt text for the image
        },
      }}
    />

    <ViewTransitions />

    <script>
      // Firebase initialization script
      import { getAnalytics } from "firebase/analytics";
      import { initializeApp } from "firebase/app";

      const firebaseConfig = {
        apiKey: "AIzaSyBbhKxwhZFGVoTDw3qF301LZZgcwXNT2HU",
        authDomain: "realm-5acf4.firebaseapp.com",
        projectId: "realm-5acf4",
        storageBucket: "realm-5acf4.firebasestorage.app",
        messagingSenderId: "92930222172",
        appId: "1:92930222172:web:380cd3bf73f13fe17f1e99",
        measurementId: "G-F3KQ42560J",
      };

      let analytics;
      if (typeof window !== "undefined") {
        const app = initializeApp(firebaseConfig);
        analytics = getAnalytics(app);
      }

      export { analytics };
    </script>
  </head>
  <body
    class="flex flex-col flex-wrap justify-between md:pt-8 md:pr-16 md:pb-8 md:pl-16 p-8 max-w-full min-h-screen dark:bg-[rgb(34,33,37)] dark:text-[rgb(245,245,245)]"
  >
    <Header is404Page={is404Page} />
    <slot />
    <Footer />
  </body>
</html>

<style is:global>
  .astro-code,
  .astro-code span {
    background-color: var(--shiki-light-bg) !important;
    color: var(--shiki-light) !important;
    font-style: var(--shiki-light-font-style) !important;
    font-weight: var(--shiki-light-font-weight) !important;
    text-decoration: var(--shiki-light-text-decoration) !important;
  }
  .dark .astro-code,
  .dark .astro-code span {
    background-color: var(--shiki-dark-bg) !important;
    color: var(--shiki-dark) !important;
    font-style: var(--shiki-dark-font-style) !important;
    font-weight: var(--shiki-dark-font-weight) !important;
    text-decoration: var(--shiki-dark-text-decoration) !important;
  }
</style>
